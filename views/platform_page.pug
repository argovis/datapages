doctype html
html(lang='en')
    head
        title=title
        meta(charset='utf-8')
        link(rel='stylesheet', href='/stylesheets/style.css')
        link(rel='stylesheet', href='/stylesheets/external-css/bootstrap-table.css')
        link(rel='stylesheet', href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css")
        script(type="text/javascript", src='https://cdn.plot.ly/plotly-latest.min.js')
        script(src='/javascripts/external-js/FileSaver.min.js')
        script(src='/javascripts/external-js/jquery.min.js')
        script(src='/javascripts/external-js/bootstrap.min.js')
        script(src='/javascripts/external-js/tableexport.min.js')
        script(src="/javascripts/external-js/moment.min.js")
        script(src="/javascripts/external-js/bootstrap-table.js")

    body
    block content
        div(class='selection_and_catalog_page')
            div(class='row')
                div(class='col-lg-3')
                    #map_plot
                div(class='col-lg-9')
                    #pres_v_temp_plot
                    #pres_v_psal_plot
            p Disclaimer: profiles with Iridium (Positioning System GPS) plot only 200 points max.
            button.btn.btn-primary.btn-block(type='submit', id='downloadProfiles') Download data as JSON
            div(class='top')
                a(href='/catalog/platforms/'+ title + '/page2' target='_blank') To platform PT, PS, and TS plot pages
            div(class='middle')
                a(href='http://www.jcommops.org/board/wa/Platform?ref='+ title target='_blank') To JCOMMOPS page
            div(class='bottom')
                a(href='/' ) To main page
            //- table(class="table sortable", id='profileTable')
            table(class="table-striped", data-toggle="table", id='profileTable')
                thead(height='50px')
                    tr
                        th Link to GDAC data
                        th Dac
                        th Parameters
                        th Positioning system
                        th(data-sortable='true' data-sorter="latSorter") Lat
                        th(data-sortable='true' data-sorter="lonSorter") Lon
                        th Link to profile page
                        th(data-sortable='true') Date reported
                        th(data-sortable='true') Cycle number
                        th(data-sortable='true') Core Data mode
                        th(data-sortable='true') Num. of meas.
                tbody(overflow='auto', height='150px')
                    each profile, i in JSON.parse(profiles)
                        tr
                            td 
                                a(href=profile.nc_url) #{profile._id} data
                            td #{profile.dac}
                            td #{profile.formatted_station_parameters}
                            td #{profile.POSITIONING_SYSTEM}
                            td #{profile.strLat}
                            td #{profile.strLon}
                            td 
                                a(href='/catalog/profiles/'+profile._id + '/page' target='_blank') #{profile._id} page
                            td #{moment.utc(profile.date).format("YYYY-MM-DD HH:mm")}
                            td #{profile.cycle_number}
                            td #{profile.core_data_mode}
                            td #{profile.measurements.length}

    script(type='text/javascript').
        TableExport(document.getElementsByTagName("table"), {
        headers: true,                              // (Boolean), display table headers (th or td elements) in the <thead>, (default: true)
        footers: true,                              // (Boolean), display table footers (th or td elements) in the <tfoot>, (default: false)
        formats: ['csv', 'xlsx', 'xls', 'txt'],     // (String[]), filetype(s) for the export, (default: ['xls', 'csv', 'txt'])
        filename: !{title}+'_table',                // (id, String), filename for the downloaded file, (default: 'id')
        bootstrap: true,                            // (Boolean), style buttons using bootstrap, (default: true)
        exportButtons: true,                        // (Boolean), automatically generate the built-in export buttons for each of the specified formats (default: true)
        position: 'bottom',                         // (top, bottom), position of the caption element relative to table, (default: 'bottom')
        ignoreRows: null,                           // (Number, Number[]), row indices to exclude from the exported file(s) (default: null)
        ignoreCols: null,                           // (Number, Number[]), column indices to exclude from the exported file(s) (default: null)
        trimWhitespace: true                        // (Boolean), remove all leading/trailing newlines, spaces, and tabs from cell text in the exported file(s) (default: false)
        })

        $('#downloadProfiles').on('click', function(){
            var url = '/catalog/platforms/' + `#{title}`
            window.open(url,'_blank')
        })

    script(type='text/javascript').

        $.when(
        $.getScript( "/javascripts/chartFunctions.js" ),
        $.Deferred(function( deferred ){
            $( deferred.resolve )
        })
        ).done(function(){
        
        const profiles = !{profiles}
        const dataArrays = makeColorChartDataArrays(profiles)
        const chartData = filterColorChartDataArrays(dataArrays)
        const measurements = makeColorChartMeasurements(chartData)

        var temp_layout = {
            title: "Temperature measurements",  
            height: 300, 
            width: 1000, 
            //autosize: false, 
            yaxis: {
                showticklabels: true,
                autorange: 'reversed', //scattergl currently does not show tick labels when axis is reversed
                type: "linear", 
                title: "Pressure [dbar]"
            },
            xaxis: {
                autorange: true, 
                type: "date", 
                title: "Date"
            }, 
            hovermode: "closest", 
            showlegend: true,
        }

        var psal_layout = {
            title: "Salinity measurements",  
            height: 300, 
            width: 1000, 
            //autosize: false, 
            yaxis: {
                showticklabels: true, 
                autorange: 'reversed', //scattergl currently does not show tick labels when axis is reversed
                type: "linear", 
                title: "Pressure [dbar]"
            },
            xaxis: {
                autorange: true, 
                type: "date", 
                title: "Date"
            }, 
            hovermode: "closest", 
            showlegend: true
        }

        Plotly.plot('pres_v_temp_plot',
                    makeColorChartTrace( measurements['pres_v_temp'], 'pres_v_temp'),
                    temp_layout)
        Plotly.plot('pres_v_psal_plot', 
                    makeColorChartTrace( measurements['pres_v_psal'], 'pres_v_psal'),
                    psal_layout)

        mapData = makeMap(dataArrays.lats, dataArrays.longs, dataArrays.ids)

        Plotly.newPlot('map_plot', mapData.data, mapData.layout)
    

        // Upon click a new tab opens to the corresponding profile.
        pres_v_temp_plot.on('plotly_click', function(data){
            linkToProfilePage(data)
        })

        pres_v_psal_plot.on('plotly_click', function(data){
            linkToProfilePage(data)
        })

        // Upon click a new tab opens to the corresponding profile.
        map_plot.on('plotly_click', function(data){
            mapLinkToProfilePage(data)
        })
        })